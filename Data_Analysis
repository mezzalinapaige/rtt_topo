library(lme4)
library(tidyverse)
library(gridExtra)

#RUN GLMS

#all studies: gene distance (GD)
GDglmLerB <- lmer(log(Gene.Distance) ~ (log(Mean.Branch.Lengths) + CoV.RootTotip.Lengths + Stemminess + Mean.Branch.Support) + (1 | Study.Number), weights = Number.of.Branches, data= data_df)
GDglmLerT <- lmer(log(Gene.Distance) ~ (log(Mean.Branch.Lengths) + CoV.RootTotip.Lengths + Stemminess + Mean.Branch.Support) + (1 | Study.Number), weights = Number.of.Taxa, data= data_df)
GDglmLer <- lmer(log(Gene.Distance) ~ (log(Mean.Branch.Lengths) + CoV.RootTotip.Lengths + Stemminess + Mean.Branch.Support) + (1 | Study.Number), data= data_df)

#all studies: species distance (SD)
SDglmerB <- lmer(Species.Distance ~ (log(Mean.Branch.Lengths) + CoV.RootTotip.Lengths + Stemminess + Mean.Branch.Support) + (1 | Study.Number), weights = Number.of.Branches, data= data_df)
SDglmerT <- lmer(Species.Distance ~ (log(Mean.Branch.Lengths) + CoV.RootTotip.Lengths + Stemminess + Mean.Branch.Support) + (1 | Study.Number), weights = Number.of.Taxa, data= data_df)
SDglmer <- lmer(Species.Distance ~ (log(Mean.Branch.Lengths) + CoV.RootTotip.Lengths + Stemminess + Mean.Branch.Support) + (1 | Study.Number), data= data_df)

#individual glms
get_indvGDglms <- function(study) { 
  glm(log(Gene.Distance) ~ (log(Total.Branch.Lengths) + CoV.RootTotip.Lengths + Stemminess + Mean.Branch.Support), data= study)
}
get_indvSDglms <- function(study) {
  glm(Species.Distance ~ (log(Total.Branch.Lengths) + CoV.RootTotip.Lengths + Stemminess + Mean.Branch.Support), data= study)
}

indvGDglms <- list()
indvSDglms <- list()
for (i in 1:34) {
  glmi <- get_indvGDglms(study = subset(data_df, data_df$Study == i))
  indvGDglms[[(length(indvGDglms)+1)]] <- glmi
  sglmi <- get_indvSDglms(study = subset(data_df, data_df$Study == i))
  indvSDglms[[(length(indvSDglms)+1)]] <- sglmi
}

#ORGANISE DATA INTO DATA FRAME

#Get t-statistics from glm summaries
get_tStat <- function(glm) {
  coef(summary(glm))[,"t value"]
}

#Create data frame of t-statistics
create_df <- function(glmslist, glm) {
  
  #extract t-stats from individual models
  indvglm_tstats <- lapply(glmslist, get_tStat)
  
  #extract t-stats from all study models
  bigglm_tstats <- get_tStat(glm) #get t-stats for big model
  
  #Concatenate individual and all studies t-stat lists
  allTstats <- indvglm_tstats
  allTstats[[(length(allTstats)+1)]] <- bigglm_tstats #put all t-stats into one big list
  
  #Create dataframe
  df <- as.data.frame(do.call(cbind, lapply(allTstats, `length<-`, max(lengths(allTstats)))))
  rownames(df) <- c("Intercept", "Total Branch Lengths", "CV Root to Tip Lengths", "Stemminess", "Mean Branch Support")
  #df <- cbind(df, glmdf) #Bind bigmodel to df
  
  df <- df[-1,] #Remove Intercept variable
  
  #Rename rows to study.number
  for (i in 1:35) {
    colnames(df)[i] <- paste0(i)
  } 
  
  #Melt dataframe for plotting
  df$group <- row.names(df) #Put variables in group for melt transformation
  df.m <- melt(df, id.vars = "group")
  return(df.m)
}

GDTs.m <- create_df(indvGDglms, GDglmLer)
GDTs.mT <- create_df(indvGDglms, GDglmLerT)
GDTs.mB <- create_df(indvGDglms, GDglmLerB)
SDTs.m <- create_df(indvSDglms, SDglmer)
SDTs.mT <- create_df(indvSDglms, SDglmerT)
SDTs.mB <- create_df(indvSDglms, SDglmerB)

#Re-order variables for plots 
SDTs.m$group <- factor(SDTs.m$group, levels=unique(c("CV Root to Tip Lengths", "Total Branch Lengths", "Stemminess", "Mean Branch Support")))
SDTs.mT$group <- factor(SDTs.mT$group, levels=unique(c("CV Root to Tip Lengths", "Total Branch Lengths", "Stemminess", "Mean Branch Support")))
SDTs.mB$group <- factor(SDTs.mB$group, levels=unique(c("CV Root to Tip Lengths", "Total Branch Lengths", "Stemminess", "Mean Branch Support")))
GDTs.m$group <- factor(GDTs.m$group, levels=unique(c("CV Root to Tip Lengths", "Total Branch Lengths", "Stemminess", "Mean Branch Support")))
GDTs.mT$group <- factor(GDTs.mT$group, levels=unique(c("CV Root to Tip Lengths", "Total Branch Lengths", "Stemminess", "Mean Branch Support")))
GDTs.mB$group <- factor(GDTs.mB$group, levels=unique(c("CV Root to Tip Lengths", "Total Branch Lengths", "Stemminess", "Mean Branch Support")))

#PLOTTING


g_legend<-function(a.gplot){
  tmp <- ggplot_gtable(ggplot_build(a.gplot))
  leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
  legend <- tmp$grobs[[leg]]
  return(legend)}

lineplot_function <- function(df1, df2, filename) {
  SDlplot <- ggplot(df1, aes(group, value, group = variable, color = variable)) +
    geom_line()  +
    geom_line(data = subset(df1, df1$variable == '35'), colour = 'grey40')  +
    coord_cartesian(ylim = c(-55, 25)) +
    #scale_y_continuous(breaks = round_any(seq(min(SDTs.m$value), max(SDTs.m$value), length.out = 5), 5)) + 
    geom_hline(yintercept = 0, linetype = "dashed", show.legend = TRUE) +
    theme_bw() +
    scale_x_discrete(labels = function(x) str_wrap(x, width = 10)) +
    theme(plot.title = element_text(size = 10, face = "bold")) +
    labs(title = "A. Distance to Species Tree", x="Topological Measurement", y="T Statistic") +
    theme(legend.position = "right", legend.text = element_text(size = 6)) +
    guides(colour=guide_legend(override.aes=list(colour=c(hue_pal()(35)[1:34], 'grey40')))) +
    scale_colour_discrete(name = "Study", labels=c(unlist(references), "All"))
  
  GDlplot <- ggplot(df2, aes(group, value, group = variable, color = variable)) +
    geom_line()  +
    geom_line(data = subset(df2, df2$variable == '35'), colour = 'grey40')  +
    coord_cartesian(ylim = c(-55, 25)) +
    #scale_y_continuous(breaks = round_any(seq(min(GDTs.m$value), max(GDTs.m$value), length.out = 5), 5)) + 
    geom_hline(yintercept = 0, linetype = "dashed") +
    theme_bw() +
    scale_x_discrete(labels = function(x) str_wrap(x, width = 10)) +
    theme(plot.title = element_text(size = 10, face = "bold")) +
    theme(legend.position = "none") +
    labs(title = "B. Distance to Gene Trees", x="Topological Measurement", y="T Statistic")
  
  mylegend<-g_legend(SDlplot)
  
  aspectR <- 2.5
  pdf(file = filename, onefile = TRUE, height = 7, width = 7*aspectR, useDingbats = FALSE)
  lineplot <- grid.arrange(arrangeGrob(SDlplot + theme(legend.position="none"),
                                       GDlplot + theme(legend.position="none"),
                                       nrow=1),
                           mylegend, widths=c(70, 22))
  dev.off()
}

lineplot_function(SDTs.m, GDTs.m, "Plots/line_sameNoWeights4.pdf")
lineplot_function(SDTs.mT, GDTs.mT, "Plots/line_sameTaxaWeights4.pdf")
lineplot_function(SDTs.mB, GDTs.mB, "Plots/line_sameBranchWeights4.pdf")
